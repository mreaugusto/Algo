1:Traverse the tree without recursion in order. Methods: inOrder(BinaryTree), and inOrderWithStack(Node root)
2:/**
 * public class BinaryTree {
 *	int value;
 	BinaryTree parent;
 *	BinaryTree left;
 *	BinaryTrree right;
 * }
 * public class Node {
 * 	int value;
 * 	Node left;
 * 	Node right;
 * }
 */
public void inOrder(BinaryTree tree) {3:
	BinaryTree previous = null;
	BinaryTree current = tree;
	while(current != null) {
		BinaryTree next;
		if(previous == null || previous == current.parent) {
			if(current.left != null) {
				next = current.left;
			} else {
				callback.apply(current);
				next = current.right != null ? current.right : current.parent;
			}
		} else if(previous == current.left) {
			callback.apply(current);
			next = current.right != null ? current.right : current.parent;
		} else {
			next = current.parent;
		}
		previous = current;
		current = next;
	}
}
public List<Integer> inOrderWithStack(Node node) {
	List<Integer> ans = new ArrayList<>();
	Stack<Node> stack = new Stack<>();
	while(node != null || !stack.isEmpty()) {
		while(node != null) {
			stack.push(node);
			node = node.left;
		}
		node = stack.pop();
		ans.add(node.value);
		node = node.right;
	}
	return ans;
}
